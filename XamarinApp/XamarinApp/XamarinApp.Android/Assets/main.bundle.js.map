{"version":3,"sources":["webpack:///./src/environments/environment.ts","webpack:///./src/app/ngAuth/authenticators/AzureADAuthService.ts","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/ngAuth/AuthenticatedHttpService.ts","webpack:///./src/app/status/status.component.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/authsettings.config.ts","webpack:///./src/app/ngAuth/authenticators/AzureADServiceConstants.ts","webpack:///./src/app/ngAuth/authenticators/JwtHelper.ts","webpack:///./src/app/ngAuth/authenticators/XamarinBridge/Authentication.ts","webpack:///./src/app/ngAuth/authenticators/XamarinBridge/index.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","/// <reference path='cordova-plugin-ms-adal.d.ts' />\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\n\r\nimport { serviceConstants } from '../../authsettings.config';\r\n\r\nimport { XamarinBridge } from './XamarinBridge';\r\n\r\nimport { JwtHelper } from './JwtHelper';\r\n\r\nlet _authenticationContext: Microsoft.ADAL.AuthenticationContext;\r\nlet _authResult: Microsoft.ADAL.IAuthenticationResult;\r\n\r\n@Injectable()\r\nexport class AzureADAuthService {\r\n    private params = this.parseQueryString(location.hash);\r\n\r\n    private parseQueryString(url: string) {\r\n        const params = {};\r\n        let queryString = '';\r\n        if (url.search('#') !== -1) {\r\n            queryString = url.substring(url.search('#') + 1);\r\n\r\n        } else {\r\n            queryString = url.substring(url.indexOf('?') + 1);\r\n        }\r\n        const a = queryString.split('&');\r\n        for (let i = 0; i < a.length; i++) {\r\n            const b = a[i].split('=');\r\n            params[decodeURIComponent(b[0])] = decodeURIComponent(b[1] || '');\r\n        }\r\n        return params;\r\n    }\r\n\r\n    constructor() {\r\n        if ((<any>window).isCordova || (<any>window).isElectron || (<any>window).isXamarin) {\r\n            return;\r\n        }\r\n        if (this.params['id_token'] != null) {\r\n            window.localStorage.setItem('id_token', this.params['id_token']);\r\n            // redirect to get access token here..\r\n            window.location.href = 'https://login.microsoftonline.com/' + serviceConstants.tenantID +\r\n                '/oauth2/authorize?response_type=token&client_id=' + serviceConstants.clientID +\r\n                '&resource=' + serviceConstants.graphResource +\r\n                '&redirect_uri=' + encodeURIComponent(window.location.href) +\r\n                '&prompt=none&state=' + this.params['state'] + '&nonce=SomeNonce';\r\n        } else if (this.params['access_token'] != null) {\r\n            window.localStorage.setItem('access_token', this.params['access_token']);\r\n            // redirect to the original call URl here.\r\n            window.location.href = decodeURIComponent(this.params['state']);\r\n        }\r\n    }\r\n\r\n    public isUserAuthenticated(): Promise<any> {\r\n        const promise = new Promise((resolve, reject) => {\r\n            this.getAccessToken().then(access_token => {\r\n                resolve(access_token != null && access_token !== '');\r\n            });\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    logIn(state = '/') {\r\n        if ((<any>window).isXamarin) {\r\n            const promise = new Promise((resolve, reject) => {\r\n                XamarinBridge.Authentication.Login(\r\n                    'https://login.windows.net/' + serviceConstants.tenantID,\r\n                    serviceConstants.graphResource,\r\n                    serviceConstants.clientID,\r\n                    serviceConstants.redirectURL\r\n                ).then(access_token => {\r\n                    resolve(access_token);\r\n                });\r\n            });\r\n            return promise;\r\n        } else if ((<any>window).isCordova) {\r\n            const promise = new Promise((resolve, reject) => {\r\n                const authority = 'https://login.windows.net/' + serviceConstants.tenantID;\r\n                const _serviceConstants = serviceConstants;\r\n                Microsoft.ADAL.AuthenticationContext.createAsync(authority)\r\n                    .then(function (context) {\r\n                        _authenticationContext = context;\r\n                        _authenticationContext.acquireTokenAsync(\r\n                            _serviceConstants.graphResource,\r\n                            _serviceConstants.clientID,\r\n                            _serviceConstants.redirectURL)\r\n                            .then(function (authResult) {\r\n                                _authResult = authResult;\r\n                                resolve(1);\r\n                            }, function (message) { reject(message); });\r\n                    }, function (message) { reject(message); });\r\n            });\r\n            return promise;\r\n        } else if ((<any>window).isElectron) {\r\n            const originalURL = location.href;\r\n            const authUrl = 'https://login.microsoftonline.com/' + serviceConstants.tenantID +\r\n                '/oauth2/authorize?response_type=id_token&client_id=' + serviceConstants.clientID +\r\n                '&redirect_uri=' + encodeURIComponent(serviceConstants.redirectURL) +\r\n                '&state=' + state + '&nonce=SomeNonce';\r\n\r\n            const BrowserWindow = (<any>window).electron.remote.BrowserWindow;\r\n\r\n            let authWindow = new BrowserWindow({\r\n                width: 800, height: 600, show: false, frame: false, webPreferences: { nodeIntegration: false }\r\n            });\r\n\r\n            authWindow.webContents.on('did-get-redirect-request', (event: any, oldUrl: string, newUrl: string) => {\r\n                const params: any = this.parseQueryString(newUrl);\r\n                if (params['wtrealm']) {\r\n                    const realm: string = params['wtrealm'];\r\n                    if (realm.includes('urn:federation:MicrosoftOnline')) {\r\n                        return;\r\n                    }\r\n                }\r\n                authWindow.destroy();\r\n                if (params['id_token'] != null) {\r\n                    window.localStorage.setItem('id_token', params['id_token']);\r\n                    const accessTokenUrl = 'https://login.microsoftonline.com/' + serviceConstants.tenantID +\r\n                        '/oauth2/authorize?response_type=token&client_id=' + serviceConstants.clientID +\r\n                        '&resource=' + serviceConstants.graphResource +\r\n                        '&redirect_uri=' + encodeURIComponent(serviceConstants.redirectURL) +\r\n                        '&prompt=none&state=' + params['state'] + '&nonce=SomeNonce';\r\n\r\n                    let accessWindow = new BrowserWindow({\r\n                        width: 800, height: 600, show: false, frame: false, webPreferences: { nodeIntegration: false }\r\n                    });\r\n\r\n                    accessWindow.on('closed', () => {\r\n                        accessWindow = null;\r\n                    });\r\n\r\n                    accessWindow.webContents.on('did-get-redirect-request',\r\n                        (accessTokenEvent: any, accessTokenOldUrl: string, accessTokenNewUrl: string) => {\r\n                            accessWindow.destroy();\r\n                            const accessTokenParams: any = this.parseQueryString(accessTokenNewUrl);\r\n\r\n                            if (accessTokenParams['access_token'] != null) {\r\n                                window.localStorage.setItem('access_token', accessTokenParams['access_token']);\r\n                                (<any>window).electron.remote.getCurrentWindow().loadURL(accessTokenParams['state']);\r\n                            } else {\r\n                                window.localStorage.removeItem('id_token');\r\n                                window.localStorage.removeItem('access_token');\r\n                            }\r\n                        });\r\n                    accessWindow.loadURL(accessTokenUrl);\r\n\r\n                } else {\r\n                    window.localStorage.removeItem('id_token');\r\n                    window.localStorage.removeItem('access_token');\r\n                }\r\n            });\r\n\r\n            // reset the authWindow on close\r\n            authWindow.on('closed', () => {\r\n                authWindow = null;\r\n            });\r\n\r\n            authWindow.loadURL(authUrl);\r\n            authWindow.show();\r\n        } else {\r\n            window.location.href = 'https://login.microsoftonline.com/' + serviceConstants.tenantID +\r\n                '/oauth2/authorize?response_type=id_token&client_id=' + serviceConstants.clientID +\r\n                '&redirect_uri=' + encodeURIComponent(window.location.href) +\r\n                '&state=' + state + '&nonce=SomeNonce';\r\n        }\r\n    }\r\n\r\n    logOut(state = '/') {\r\n        if ((<any>window).isXamarin) {\r\n            const promise = new Promise((resolve, reject) => {\r\n                XamarinBridge.Authentication.Logout().then(result => {\r\n                    resolve(result);\r\n                });\r\n            });\r\n            return promise;\r\n        } else if (serviceConstants.isCordova) {\r\n            const promise = new Promise((resolve, reject) => {\r\n                _authenticationContext.tokenCache.clear();\r\n                resolve(1);\r\n            });\r\n            return promise;\r\n        } else if (serviceConstants.isElectron) {\r\n            window.localStorage.removeItem('id_token');\r\n            window.localStorage.removeItem('access_token');\r\n            (<any>window).electron.remote.getCurrentWindow().loadURL(state);\r\n        } else {\r\n            window.localStorage.removeItem('id_token');\r\n            window.localStorage.removeItem('access_token');\r\n            window.location.href = state;\r\n        }\r\n    }\r\n\r\n    refreshAccessToken(state = '/') {\r\n        if (serviceConstants.isCordova) {\r\n            let testUserId = '';\r\n            _authenticationContext.tokenCache.readItems().then(function (cacheItems) {\r\n                if (cacheItems.length > 0) {\r\n                    testUserId = cacheItems[0].userInfo.userId;\r\n                }\r\n\r\n                _authenticationContext.acquireTokenSilentAsync(\r\n                    serviceConstants.graphResource,\r\n                    serviceConstants.clientID, testUserId).then(function (authResult) {\r\n                        _authResult = authResult;\r\n                    });\r\n            });\r\n        } else {\r\n            this.logIn(state); // force login, assume that renewToken.html didn't work which is why dev is calling this.\r\n        }\r\n    }\r\n\r\n    public getAccessToken(): Promise<string> {\r\n        const promise = new Promise((resolve, reject) => {\r\n            if ((<any>window).isXamarin) {\r\n                XamarinBridge.Authentication.getAccessToken().then(access_token => { resolve(access_token); });\r\n            } else if ((<any>window).isCordova) {\r\n                if (_authResult === undefined) { resolve(null); }\r\n                resolve(_authResult.accessToken);\r\n            } else {\r\n                resolve(window.localStorage.getItem('access_token'));\r\n            }\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    public ServiceConstants() {\r\n        return serviceConstants;\r\n    }\r\n\r\n    public toString() {\r\n        return 'AzureADAuthHelper';\r\n    }\r\n\r\n    public get userName(): Promise<string> {\r\n        const promise = new Promise((resolve, reject) => {\r\n            this.getAccessToken().then(access_token => {\r\n                const jwtHelper = new JwtHelper();\r\n                const parsedToken = jwtHelper.decodeToken(access_token);\r\n\r\n                const expiryTime = new Date(parsedToken.exp * 1000);\r\n                const now = new Date();\r\n                if (now > expiryTime) { this.logOut(); };\r\n\r\n                resolve(parsedToken.upn);\r\n            });\r\n        });\r\n        return promise;\r\n    }\r\n}\r\n\r\nfunction error(err) {\r\n    console.error(JSON.stringify(err, null, 4));\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/ngAuth/authenticators/AzureADAuthService.ts","import { Component } from '@angular/core';\r\nimport { Inject, Injectable } from '@angular/core';\r\n\r\n@Component({\r\n    template:`\r\n        Simple app demonstrates logging into AzureAD and running a command against the Azure AD graph. <br/> \r\n        Click the login tab to login, and status tab to view your login status.\r\n        `\r\n    })\r\nexport class HomeComponent { }\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/home.component.ts","import { Component, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport {AzureADAuthService} from '../ngAuth/authenticators/AzureADAuthService';\r\n\r\n@Component({\r\n    template: `\r\n        <button (click)='logIn()'>\r\n            Sign In\r\n        </button>`\r\n})\r\n\r\nexport class LoginComponent {\r\n    constructor(\r\n        @Inject(AzureADAuthService) private _authService: AzureADAuthService,\r\n        private _router: Router) { }\r\n\r\n    logIn() {\r\n        // this._authService.logOut('');\r\n        this._authService.logIn('');\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/login/login.component.ts","import { Injectable, Inject } from '@angular/core';\r\nimport { Http, Headers, Response } from '@angular/http';\r\nimport { AzureADAuthService } from './authenticators/AzureADAuthService';\r\n\r\n@Injectable()\r\nexport class AuthenticatedHttpService {\r\n  private _authenticator: AzureADAuthService;\r\n  private _http: Http;\r\n  constructor( @Inject(Http) http: Http, @Inject(AzureADAuthService) authenticator: AzureADAuthService) {\r\n    this._authenticator = authenticator;\r\n    this._http = http;\r\n  }\r\n\r\n  createAuthorizationHeader(headers: Headers) {\r\n    if (this._authenticator.toString() === 'SessionAuthenticator') { return; }\r\n    headers.append('Authorization', 'Bearer ' + this._authenticator.getAccessToken());\r\n  }\r\n\r\n  get(url) {\r\n    const promise = new Promise((resolve, reject) => {\r\n      const headers = new Headers();\r\n      this._authenticator.getAccessToken().then(access_token => {\r\n        headers.append('Authorization', 'Bearer ' + access_token);\r\n        const observable = this._http.get(url, { headers: headers });\r\n        observable.subscribe(\r\n          res => {\r\n            resolve(res.json());\r\n          },\r\n          err => {\r\n            if (err.status === 401) {\r\n              this._authenticator.logIn();\r\n            } else { reject(err); }\r\n          });\r\n      });\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  post(url, data) {\r\n    const promise = new Promise((resolve, reject) => {\r\n      const headers = new Headers();\r\n      this._authenticator.getAccessToken().then(access_token => {\r\n        headers.append('Authorization', 'Bearer ' + access_token);\r\n        this._http.post(url, data, {\r\n          headers: headers,\r\n        }).subscribe(res => {\r\n          resolve(res.json());\r\n        });\r\n      });\r\n    });\r\n    return promise;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/ngAuth/AuthenticatedHttpService.ts","// #docregion\r\nimport { Component, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthenticatedHttpService } from '../ngAuth/AuthenticatedHttpService';\r\nimport { AzureADAuthService } from '../ngAuth/authenticators/AzureADAuthService';\r\n\r\n\r\n@Component({\r\n    template: `\r\n        <div *ngIf=\"currentUserName\">\r\n                userName: {{currentUserName}}\r\n                <br/>\r\n                <button (click)=\"logOut()\">Logout</button>\r\n                <br/>\r\n                <button (click)=\"runCommand()\">\r\n                    Run Command\r\n                </button>\r\n                <pre>{{_userData | json}}</pre>\r\n        </div>\r\n        <div *ngIf=\"!currentUserName\">\r\n            User is not signed in.\r\n        </div>\r\n        `\r\n})\r\n\r\nexport class StatusComponent {\r\n    private _userData: Object = { 'intialValue': 'Data will show here once you press RunCommand' };\r\n    currentUserName = '';\r\n    constructor(\r\n        @Inject(AzureADAuthService) private _authService: AzureADAuthService,\r\n        private _authenticatedHttpService: AuthenticatedHttpService) {\r\n        if ((<any>window).isCordova || (<any>window).isXamarin) {\r\n            document.addEventListener('resume', () => {\r\n                setTimeout(() => {\r\n                    this._authService.userName.then(userName => { this.currentUserName = userName; });\r\n                }, 1000);\r\n            }, false);\r\n        }\r\n        this._authService.userName.then(userName => { this.currentUserName = userName; });\r\n    }\r\n\r\n    logOut() {\r\n        this._authService.logOut('');\r\n    }\r\n\r\n    runCommand() {\r\n        this._authenticatedHttpService.get('https://graph.windows.net/me?api-version=1.6').then(results => {\r\n            this._userData = results;\r\n        });\r\n        // this._authenticatedHttpService.get(\"https://graph.microsoft.com/v1.0/me/drive/recent\").subscribe((results => {\r\n        //     this._files = results.json().value;\r\n        // }));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/status/status.component.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 86;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 86\n// module chunks = 1","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component } from '@angular/core';\r\n@Component({\r\n    selector: 'app-root',\r\n    template: `\r\n    <a [routerLink]=\"['']\">About</a> | <a [routerLink]=\"['login']\">Login</a> | <a [routerLink]=\"['status']\">Status</a> <br/>  \r\n    <router-outlet></router-outlet>`\r\n})\r\n\r\nexport class AppComponent { }\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","// #docregion\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpModule } from '@angular/http';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { routing } from './app.routing';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { StatusComponent } from './status/status.component';\r\n\r\nimport { AzureADServiceConstants } from './ngAuth/authenticators/AzureADServiceConstants';\r\nimport { AzureADAuthService } from './ngAuth/authenticators/AzureADAuthService';\r\nimport { AuthenticatedHttpService } from './ngAuth/AuthenticatedHttpService';\r\n\r\nimport { serviceConstants } from './authsettings.config';\r\n\r\nexport function getAuthenticator() {\r\n    return new AzureADAuthService();\r\n}\r\n\r\n@NgModule({\r\n    providers: [\r\n        AuthenticatedHttpService,\r\n        {\r\n            provide: AzureADAuthService,\r\n            useFactory: getAuthenticator\r\n        }],\r\n    imports: [\r\n        routing,\r\n        BrowserModule,\r\n        HttpModule\r\n    ],\r\n    declarations: [\r\n        AppComponent,\r\n        HomeComponent,\r\n        LoginComponent,\r\n        StatusComponent\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { ModuleWithProviders }  from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport {HomeComponent} from './home/home.component';\r\nimport { StatusComponent } from './status/status.component';\r\n\r\nexport const routes: Routes = [\r\n  { path: '', component: HomeComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'status', component: StatusComponent },\r\n];\r\nexport const routing: ModuleWithProviders = RouterModule.forRoot(routes);\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.routing.ts","import {AzureADServiceConstants} from './ngAuth/authenticators/AzureADServiceConstants';\r\n\r\nexport const serviceConstants: AzureADServiceConstants = new AzureADServiceConstants(\r\n    '1c623fa4-c6c8-4903-a6aa-67c5ba9a1535',\r\n    'winsmartsdev.onmicrosoft.com',\r\n    'http://localhost:4200/login',\r\n    'https://graph.windows.net'\r\n);\n\n\n// WEBPACK FOOTER //\n// ./src/app/authsettings.config.ts","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class AzureADServiceConstants {\r\n    constructor(\r\n        public clientID: string,\r\n        public tenantID: string,\r\n        public redirectURL: string,\r\n        public backendUrl: string,\r\n        public graphResource = 'https://graph.windows.net',\r\n        public isCordova = false,\r\n        public isElectron = false) { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/ngAuth/authenticators/AzureADServiceConstants.ts","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class JwtHelper {\r\n    private urlBase64Decode(str: string) {\r\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n        switch (output.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                output += '==';\r\n                break;\r\n            case 3:\r\n                output += '=';\r\n                break;\r\n            default:\r\n                // tslint:disable-next-line:no-string-throw\r\n                throw 'Illegal base64url string!';\r\n        }\r\n        return decodeURIComponent((<any>window).escape(window.atob(output)));\r\n    }\r\n\r\n    public decodeToken(token: string = '') {\r\n        if (token === null || token === '') { return { 'upn': '' }; }\r\n        const parts = token.split('.');\r\n        if (parts.length !== 3) {\r\n            throw new Error('JWT must have 3 parts');\r\n        }\r\n        const decoded = this.urlBase64Decode(parts[1]);\r\n        if (!decoded) {\r\n            throw new Error('Cannot decode the token');\r\n        }\r\n        return JSON.parse(decoded);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/ngAuth/authenticators/JwtHelper.ts","export class Authentication {\r\n    static Login(authority: string, resourceUri: string, clientID: string, returnUri: string): Promise<string> {\r\n        return (<any>window).invokeXamarinAction(`{\r\n            'Library': 'Authentication',\r\n            'Action': 'Login',\r\n            'Parameters': {\r\n                'authority': '` + authority + `',\r\n                'resourceUri': '` + resourceUri + `',\r\n                'clientID': '` + clientID + `',\r\n                'returnUri': '` + returnUri + `'\r\n            }\r\n        }`);\r\n    }\r\n\r\n    static Logout(): Promise<string> {\r\n        return (<any>window).invokeXamarinAction(`{\r\n            'Library': 'Authentication',\r\n            'Action': 'Logout',\r\n            'Parameters': {\r\n            }\r\n        }`);\r\n    }\r\n\r\n    static getAccessToken(): Promise<string> {\r\n        return (<any>window).invokeXamarinAction(`{\r\n            'Library': 'Authentication',\r\n            'Action': 'GetAccessToken',\r\n            'Parameters': {\r\n            }\r\n        }`);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/ngAuth/authenticators/XamarinBridge/Authentication.ts","import { Authentication } from './Authentication';\r\n\r\nexport const XamarinBridge = {\r\n    'Authentication': Authentication,\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/ngAuth/authenticators/XamarinBridge/index.ts"],"sourceRoot":""}